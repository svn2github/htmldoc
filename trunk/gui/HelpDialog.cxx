// generated by Fast Light User Interface Designer (fluid) version 1.0011

#include "gui.h"
#include "HelpDialog.h"

inline void HelpDialog::cb_view__i(HelpView*, void*) {
  if (view_->changed())
{
  index_ ++;

  if (index_ >= 100)
  {
    memcpy(line_, line_ + 10, sizeof(line_[0]) * 90);
    memcpy(file_, file_ + 10, sizeof(file_[0]) * 90);
    index_ -= 10;
  }

  max_ = index_;

  strcpy(file_[index_], view_->filename());
  line_[index_] = view_->topline();

  if (index_ > 0)
  {
    back_->show();
    dback_->hide();
  }
  else
  {
    back_->hide();
    dback_->show();
  }

  forward_->hide();
  dforward_->show();

  window_->label(view_->title());
}
else if (view_->filename())
{
  strncpy(file_[index_], view_->filename(), 255);
  file_[index_][255] = '\0';
  line_[index_] = view_->topline();
};
}
void HelpDialog::cb_view_(HelpView* o, void* v) {
  ((HelpDialog*)(o->parent()->user_data()))->cb_view__i(o,v);
}

inline void HelpDialog::cb_back__i(Fl_Button*, void*) {
  if (index_ > 0)
  index_ --;

if (index_ == 0)
{
  back_->hide();
  dback_->show();
}

forward_->show();
dforward_->hide();

if (strcmp(view_->filename(), file_[index_]) != 0)
  view_->load(file_[index_]);

view_->topline(line_[index_]);
}
void HelpDialog::cb_back_(Fl_Button* o, void* v) {
  ((HelpDialog*)(o->parent()->parent()->user_data()))->cb_back__i(o,v);
}

inline void HelpDialog::cb_forward__i(Fl_Button*, void*) {
  if (index_ < max_)
  index_ ++;

if (index_ >= max_)
{
  forward_->hide();
  dforward_->show();
}


back_->show();
dback_->hide();

if (strcmp(view_->filename(), file_[index_]) != 0)
  view_->load(file_[index_]);

view_->topline(line_[index_]);
}
void HelpDialog::cb_forward_(Fl_Button* o, void* v) {
  ((HelpDialog*)(o->parent()->parent()->user_data()))->cb_forward__i(o,v);
}

inline void HelpDialog::cb_smaller__i(Fl_Button*, void*) {
  if (view_->textsize() > 8)
  view_->textsize(view_->textsize() - 2);

if (view_->textsize() <= 8)
  smaller_->deactivate();
larger_->activate();
}
void HelpDialog::cb_smaller_(Fl_Button* o, void* v) {
  ((HelpDialog*)(o->parent()->parent()->user_data()))->cb_smaller__i(o,v);
}

inline void HelpDialog::cb_larger__i(Fl_Button*, void*) {
  if (view_->textsize() < 18)
  view_->textsize(view_->textsize() + 2);

if (view_->textsize() >= 18)
  larger_->deactivate();
smaller_->activate();
}
void HelpDialog::cb_larger_(Fl_Button* o, void* v) {
  ((HelpDialog*)(o->parent()->parent()->user_data()))->cb_larger__i(o,v);
}

inline void HelpDialog::cb_Close_i(Fl_Menu_*, void*) {
  window_->hide();
}
void HelpDialog::cb_Close(Fl_Menu_* o, void* v) {
  ((HelpDialog*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

Fl_Menu_Item HelpDialog::menu_[] = {
 {_("&File"), 0,  0, 0, 64, 0, 0, 14, 0},
 {_("&Close"), 0x40077,  (Fl_Callback*)HelpDialog::cb_Close, 0, 0, 0, 0, 14, 0},
 {0},
 {0}
};
#include "icons/back.xpm"
#include "icons/dback.xpm"
#include "icons/forward.xpm"
#include "icons/dforward.xpm"

HelpDialog::HelpDialog() {
  Fl_Window* w;
  { Fl_Window* o = window_ = new Fl_Window(535, 385, _("Help Dialog"));
    w = o;
    o->user_data((void*)(this));
    { HelpView* o = view_ = new HelpView(0, 80, 535, 305);
      o->box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_view_);
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Pack* o = new Fl_Pack(0, 25, 535, 55);
      o->box(FL_FLAT_BOX);
      { Fl_Button* o = back_ = new Fl_Button(0, 25, 60, 55, _("Back"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_back_);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        guiAddImage(back_, (const char **)back_xpm);
      }
      { Fl_Button* o = dback_ = new Fl_Button(0, 25, 60, 55, _("Back"));
        o->box(FL_FLAT_BOX);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        o->hide();
        o->deactivate();
        guiAddImage(dback_, (const char **)dback_xpm);
      }
      { Fl_Button* o = forward_ = new Fl_Button(60, 25, 60, 55, _("Forward"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_forward_);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        guiAddImage(forward_, (const char **)forward_xpm);
      }
      { Fl_Button* o = dforward_ = new Fl_Button(60, 25, 60, 55, _("Forward"));
        o->box(FL_FLAT_BOX);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        o->hide();
        o->deactivate();
        guiAddImage(dforward_, (const char **)dforward_xpm);
      }
      { Fl_Button* o = smaller_ = new Fl_Button(120, 25, 55, 55, _("F"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_DOWN_BOX);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_smaller_);
      }
      { Fl_Button* o = larger_ = new Fl_Button(175, 25, 55, 55, _("F"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_DOWN_BOX);
        o->labelfont(1);
        o->labelsize(40);
        o->callback((Fl_Callback*)cb_larger_);
      }
      o->type(Fl_Pack::HORIZONTAL);
      o->end();
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 535, 25);
      o->menu(menu_);
    }
    o->end();
  }
  back_->hide();
dback_->show();
forward_->hide();
dforward_->show();

index_ = -1;
max_  = 0;
}

int HelpDialog::h() {
  return (window_->h());
}

void HelpDialog::hide() {
  window_->hide();
}

void HelpDialog::load(const char *f) {
  view_->set_changed();
view_->load(f);
window_->label(view_->title());
}

void HelpDialog::position(int xx, int yy) {
  window_->position(xx, yy);
}

void HelpDialog::resize(int xx, int yy, int ww, int hh) {
  window_->resize(xx, yy, ww, hh);
}

void HelpDialog::show() {
  char *name = (char *)"HelpDialog";

window_->show(1, &name);
}

void HelpDialog::textsize(uchar s) {
  view_->textsize(s);

if (s <= 8)
  smaller_->deactivate();
else
  smaller_->activate();

if (s >= 18)
  larger_->deactivate();
else
  larger_->activate();
}

uchar HelpDialog::textsize() {
  return (view_->textsize());
}

void HelpDialog::topline(const char *n) {
  view_->topline(n);
}

void HelpDialog::topline(int n) {
  view_->topline(n);
}

int HelpDialog::visible() {
  return (window_->visible());
}

int HelpDialog::w() {
  return (window_->w());
}

int HelpDialog::x() {
  return (window_->x());
}

int HelpDialog::y() {
  return (window_->y());
}
