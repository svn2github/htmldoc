# data file for the Fltk User Interface Designer (fluid)
version 1.00 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
class FileChooser {open
} {
  Function {FileChooser(const char *d, char *p, int m, const char *title)} {open
  } {
    Fl_Window window {
      label {Pick a File} open
      private xywh {173 142 345 270} resizable hotspot
      code0 {if (title) window->label(title);}
      code1 {\#include <stdio.h>}
      code2 {\#include <stdlib.h>}
      code3 {\#include <string.h>} modal visible
    } {
      Fl_Browser fileList {
        callback {fileListCB();}
        private xywh {25 45 310 180} type Hold resizable
        code1 {\#include "FileBrowser.h"}
        class FileBrowser
      }
      Fl_Button {} {
        label Cancel
        callback {fileList->deselect();
window->hide();}
        private xywh {270 235 65 25}
      }
      Fl_Return_Button {} {
        label OK
        callback {window->hide();}
        private xywh {210 235 55 25}
      }
      Fl_Group {} {open
        xywh {10 45 15 180}
        code0 {\#include <FL/Fl_Pack.H>}
        class Fl_Pack
      } {
        Fl_Button {} {
          label {*}
          callback {fileList->filter("*");;
rescan();}
          xywh {10 45 15 15} labelcolor 4 align 17
        }
        Fl_Roller roller {
          callback {fileList->textsize(o->value() * 0.1);
fileList->redraw();}
          xywh {10 60 15 100} minimum 60 maximum 640 step 1 value 140
        }
        Fl_Button {} {
          label {reset.xbm}
          callback {roller->value(140.0);
fileList->textsize(14.0);
fileList->redraw();}
          xywh {10 160 15 15} labeltype image labelsize 11
        }
      }
      Fl_Input fileName {
        label {Filename:}
        callback {fileNameCB();}
        xywh {75 235 130 25} when 8
      }
      Fl_Input dirName {
        label {Directory:}
        callback {directory(dirName->value());}
        xywh {75 10 175 25}
      }
      Fl_Button upButton {
        label {up.xbm}
        callback {up();}
        xywh {280 10 25 25} labeltype image labelsize 8
      }
      Fl_Menu_Button dirMenu {
        callback {directory(dirMenu->text());} open
        xywh {250 10 25 25}
      } {}
      Fl_Button {} {
        label {new.xbm}
        callback {newdir();}
        xywh {310 10 25 25} labeltype image labelsize 8
      }
    }
    code {window->size_range(345, 270, 345);
init_icons();
fileList->filter(p);
directory(d);
multi_ = m;
if (m)
  fileList->type(FL_MULTI_BROWSER);
else
  fileList->type(FL_HOLD_BROWSER);} {selected
    }
  }
  decl {char directory_[1024];} {}
  decl {int multi_;} {}
  decl {void fileListCB();} {}
  decl {void fileNameCB();} {}
  decl {void init_icons();} {}
  decl {void newdir();} {}
  decl {void rescan();} {public
  }
  decl {void up();} {}
  Function {color(Fl_Color c)} {} {
    code {fileList->color(c);} {}
  }
  decl {int count();} {public
  }
  decl {void directory(const char *d);} {}
  Function {directory()} {return_type {char *}
  } {
    code {return directory_;} {}
  }
  Function {filter(const char *p)} {return_type void
  } {
    code {fileList->filter(p);
rescan();} {}
  }
  Function {filter()} {return_type {const char *}
  } {
    code {return (fileList->filter());} {}
  }
  Function {hide()} {return_type void
  } {
    code {window->hide();} {}
  }
  Function {multi(int m)} {return_type void
  } {
    code {multi_ = m;
if (m)
  fileList->type(FL_MULTI_BROWSER);
else
  fileList->type(FL_HOLD_BROWSER);} {}
  }
  Function {multi()} {return_type int
  } {
    code {return (multi_);} {}
  }
  Function {show()} {return_type void
  } {
    code {window->show();
fileList->deselect();} {}
  }
  decl {const char *value(int f);} {public
  }
  Function {visible()} {return_type int
  } {
    code {return window->visible();} {}
  }
  Function {label(const char *l)} {return_type void
  } {
    code {window->label(l);} {}
  }
} 
