# data file for the Fltk User Interface Designer (fluid)
version 1.00 
header_name {.h} 
code_name {.cpp} 
gridx 5 
gridy 5 
snap 3
class FileChooser {open
} {
  decl {enum { TYPE_MULTI = 1, TYPE_FOLLOW = 2 };} {public
  }
  Function {FileChooser(const char *d, char *p, int t, const char *title)} {open
  } {
    Fl_Window window {
      label {Pick a File} open
      private xywh {173 142 296 257} hide hotspot
      code0 {if (title) window->label(title);}
      code1 {\#include <stdio.h>}
      code2 {\#include <stdlib.h>}
      code3 {\#include <string.h>} modal
    } {
      Fl_Browser fileList {
        callback {fileListCB();}
        private xywh {20 5 270 180} type Hold color 196
        code1 {\#include "FileBrowser.h"}
        class FileBrowser
      }
      Fl_Check_Button followLinks {
        label {Follow Local Links}
        private xywh {5 225 140 25} down_box DOWN_BOX color 7 selection_color 0 hide
        code0 {\#include "CheckButton.h"}
        code1 {if (!(t & TYPE_FOLLOW))
  followLinks->hide();}
        class CheckButton
      }
      Fl_Button {} {
        label Cancel
        callback {fileList->deselect();
window->hide();}
        private xywh {222 225 65 25}
      }
      Fl_Return_Button {} {
        label OK
        callback {window->hide();}
        private xywh {162 225 55 25}
      }
      Fl_Roller roller {
        callback {fileList->textsize(o->value() * 0.1);
fileList->redraw();}
        xywh {5 35 15 90} minimum 60 maximum 360 step 1 value 140
      }
      Fl_Button upButton {
        label {up.xbm}
        callback {up();}
        xywh {5 5 15 15} labeltype image labelsize 8
      }
      Fl_Button {} {
        label {reset.xbm}
        callback {roller->value(140.0);
fileList->textsize(14.0);
fileList->redraw();}
        xywh {5 125 15 15} labeltype image labelsize 11
      }
      Fl_Input fileName {
        label {Filename:}
        callback {fileNameCB();} selected
        xywh {75 190 215 25} when 8
      }
      Fl_Button {} {
        label {*}
        callback {fileList->filter("*");;
rescan();}
        xywh {5 20 15 15} labelcolor 4 align 17
      }
    }
    code {if (d == NULL)
  strcpy(directory_, ".");
else
  strcpy(directory_, d);
init_symbols();
fileList->filter(p);
rescan();
type_ = t;
if (t & TYPE_FOLLOW)
  followLinks->show();
else
  followLinks->hide();
if (t & TYPE_MULTI)
  fileList->type(FL_MULTI_BROWSER);
else
  fileList->type(FL_HOLD_BROWSER);} {}
  }
  decl {char directory_[1024];} {}
  decl {int type_;} {}
  decl {void fileListCB();} {}
  decl {void fileNameCB();} {}
  decl {void init_symbols();} {}
  decl {void rescan();} {public
  }
  decl {void up();} {}
  decl {int count();} {public
  }
  Function {directory(const char *d)} {return_type void
  } {
    code {strcpy(directory_, d);
rescan();} {}
  }
  Function {directory()} {return_type {char *}
  } {
    code {return directory_;} {}
  }
  Function {filter(const char *p)} {return_type void
  } {
    code {fileList->filter(p);
rescan();} {}
  }
  Function {filter()} {return_type {const char *}
  } {
    code {return (fileList->filter());} {}
  }
  Function {follow_links(int f)} {return_type void
  } {
    code {followLinks->value(f);
if (f)
{
  followLinks->show();
  type_ |= TYPE_FOLLOW;
}
else
{
  followLinks->hide();
  type_ &= ~TYPE_FOLLOW;
}} {}
  }
  Function {follow_links()} {return_type int
  } {
    code {return (followLinks->value());} {}
  }
  Function {hide()} {return_type void
  } {
    code {window->hide();} {}
  }
  Function {multi(int m)} {return_type void
  } {
    code {if (m)
{
  type_ |= TYPE_MULTI;
  fileList->type(FL_MULTI_BROWSER);
}
else
{
  type_ &= ~TYPE_MULTI;
  fileList->type(FL_HOLD_BROWSER);
}} {}
  }
  Function {multi()} {return_type int
  } {
    code {return (type_ & TYPE_MULTI);} {}
  }
  Function {show()} {return_type void
  } {
    code {window->show();
fileList->deselect();} {}
  }
  decl {const char *value(int f);} {public
  }
  Function {visible()} {return_type int
  } {
    code {return window->visible();} {}
  }
  Function {label(const char *l)} {return_type void
  } {
    code {window->label(l);} {}
  }
} 
