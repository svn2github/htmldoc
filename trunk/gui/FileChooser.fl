# data file for the Fltk User Interface Designer (fluid)
version 1.00 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
class FileChooser {open
} {
  decl {enum { SINGLE, MULTI, CREATE };} {public
  }
  Function {FileChooser(const char *d, char *p, int t, const char *title)} {open
  } {
    Fl_Window window {
      label {Pick a File} open
      private xywh {173 142 375 315} hide resizable hotspot
      code0 {if (title) window->label(title);}
      code1 {\#include <stdio.h>}
      code2 {\#include <stdlib.h>}
      code3 {\#include <string.h>} modal
    } {
      Fl_Browser fileList {
        callback {fileListCB();}
        private xywh {10 45 355 180} type Hold resizable
        code1 {\#include "FileBrowser.h"}
        class FileBrowser
      }
      Fl_Button {} {
        label Cancel
        callback {fileList->deselect();
window->hide();}
        private xywh {300 280 65 25}
      }
      Fl_Return_Button {} {
        label OK
        callback {window->hide();}
        private xywh {240 280 55 25}
      }
      Fl_Input fileName {
        label {Filename:}
        callback {fileNameCB();}
        xywh {10 245 355 25} align 5 when 8
        code0 {fileName->when(FL_WHEN_CHANGED | FL_WHEN_ENTER_KEY_ALWAYS);}
      }
      Fl_Button upButton {
        label {up.xbm}
        callback {up();}
        xywh {280 10 25 25} labeltype image labelsize 8
      }
      Fl_Button {} {
        label {new.xbm}
        callback {newdir();}
        xywh {310 10 25 25} labeltype image labelsize 8
      }
      Fl_Choice dirMenu {
        label {Directory:}
        callback {char pathname[1024];
int i;

pathname[0] = '\\0';
for (i = 1; i <= dirMenu->value(); i ++)
  strcat(pathname, dirMenu->text(i));
directory(pathname);} open
        xywh {75 10 200 25}
      } {}
      Fl_Button {} {
        label {allfiles.xbm}
        callback {fileList->filter("*");;
rescan();}
        xywh {340 10 25 25} labeltype image labelsize 28 labelcolor 4 align 16
      }
    }
    code {window->size_range(345, 270, 345);
init_icons();
fileList->filter(p);
type_ = t;
if (t == MULTI)
{
  directory(d);
  fileList->type(FL_MULTI_BROWSER);
}
else
{
  value(d);
  fileList->type(FL_HOLD_BROWSER);
}} {}
  }
  decl {char directory_[1024];} {}
  decl {int type_;} {selected
  }
  decl {void fileListCB();} {}
  decl {void fileNameCB();} {}
  decl {void init_icons();} {}
  decl {void newdir();} {}
  decl {void rescan();} {public
  }
  decl {void up();} {}
  Function {color(Fl_Color c)} {} {
    code {fileList->color(c);} {}
  }
  decl {int count();} {public
  }
  decl {void directory(const char *d);} {}
  Function {directory()} {return_type {char *}
  } {
    code {return directory_;} {}
  }
  Function {filter(const char *p)} {return_type void
  } {
    code {fileList->filter(p);
rescan();} {}
  }
  Function {filter()} {return_type {const char *}
  } {
    code {return (fileList->filter());} {}
  }
  Function {hide()} {return_type void
  } {
    code {window->hide();} {}
  }
  Function {type(int t)} {return_type void
  } {
    code {type_ = t;
if (t == MULTI)
  fileList->type(FL_MULTI_BROWSER);
else
  fileList->type(FL_HOLD_BROWSER);} {}
  }
  Function {type()} {return_type int
  } {
    code {return (type_);} {}
  }
  Function {show()} {return_type void
  } {
    code {window->show();
fileList->deselect();} {}
  }
  decl {const char *value(int f = 1);} {public
  }
  decl {void value(const char *filename);} {public
  }
  Function {visible()} {return_type int
  } {
    code {return window->visible();} {}
  }
  Function {label(const char *l)} {return_type void
  } {
    code {window->label(l);} {}
  }
} 
