// generated by Fast Light User Interface Designer (fluid) version 1.00

#include "FileChooser.h"

inline void FileChooser::cb_fileList_i(FileBrowser* o, void*) {
  fileListCB(o, NULL);
}
void FileChooser::cb_fileList(FileBrowser* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_fileList_i(o,v);
}

inline void FileChooser::cb_prevDir_i(Fl_Button*, void*) {
  char *slash;
if ((slash = strrchr(directory_, '/')) == NULL)
  slash = strrchr(directory_, '\\');
if (slash != NULL)
  *slash = '\0';
else
  directory_[0] = '\0';
}
void FileChooser::cb_prevDir(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_prevDir_i(o,v);
}

inline void FileChooser::cb_newDir_i(Fl_Button*, void*) {
  new_directory();
}
void FileChooser::cb_newDir(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_newDir_i(o,v);
}

inline void FileChooser::cb_Cancel_i(Fl_Button*, void*) {
  window->hide();
}
void FileChooser::cb_Cancel(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

inline void FileChooser::cb_OK_i(Fl_Return_Button*, void*) {
  window->hide();
}
void FileChooser::cb_OK(Fl_Return_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

FileChooser::FileChooser(const char *d, int t, int m, const char *title) {
  Fl_Window* w;
  { Fl_Window* o = window = new Fl_Window(296, 257, "Pick a File");
    w = o;
    o->user_data((void*)(this));
    { Fl_Choice* o = dirHistory = new Fl_Choice(70, 5, 160, 25, "Directory:");
    }
    { FileBrowser* o = fileList = new FileBrowser(5, 35, 285, 155);
      o->type(2);
      o->callback((Fl_Callback*)cb_fileList);
      Fl_Group::current()->resizable(o);
      if (m) fileList->type(FL_MULTI_BROWSER);
    }
    { Fl_Button* o = prevDir = new Fl_Button(235, 5, 25, 25, "@PrevFolder");
      o->labeltype(FL_SYMBOL_LABEL);
      o->labelcolor(3);
      o->callback((Fl_Callback*)cb_prevDir);
    }
    { Fl_Button* o = newDir = new Fl_Button(265, 5, 25, 25, "@NewFolder");
      o->labeltype(FL_SYMBOL_LABEL);
      o->labelcolor(3);
      o->callback((Fl_Callback*)cb_newDir);
    }
    fileName = new Fl_Input(35, 195, 255, 25, "File:");
    { CheckButton* o = followLinks = new CheckButton(5, 225, 140, 25, "Follow Local Links");
      o->down_box(FL_DOWN_BOX);
      o->color(7);
      o->selection_color(0);
      if (t) followLinks->deactivate();
    }
    { Fl_Button* o = new Fl_Button(225, 225, 65, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(165, 225, 55, 25, "OK");
      o->callback((Fl_Callback*)cb_OK);
    }
    o->set_modal();
    o->end();
    if (title) window->label(title);
  }
  if (d == NULL) strcpy(directory_, ".");
else strcpy(directory_, d);
init_symbols();
rescan();
ok_ = 0;
}

void FileChooser::directory(const char *d) {
  strcpy(directory_, d);
rescan();
}

char * FileChooser::directory() {
  return directory_;
}

void FileChooser::multi(int m) {
  multi_ = m;
if (m) fileList->type(FL_MULTI_BROWSER);
else fileList->type(FL_HOLD_BROWSER);
}

int FileChooser::multi() {
  return multi_;
}

int FileChooser::ok() {
  return (ok_);
}

void FileChooser::type(int t) {
  type_ = t;
if (t) followLinks->deactivate();
else followLinks->activate();
rescan();
}

int FileChooser::type() {
  return type_;
}

void FileChooser::value(const char *v) {
  char *slash;
fileName->value(v);
strcpy(directory_, v);
if ((slash = strrchr(directory_, '/')) == NULL)
  slash = strrchr(directory_, '\\');
if (slash == NULL) directory_[0] = '\0';
else *slash = '\0';
rescan();
}

const char * FileChooser::value() {
  return fileName->value();
}

void FileChooser::show() {
  window->show();
}

void FileChooser::hide() {
  window->hide();
}

int FileChooser::visible() {
  return window->visible();
}
