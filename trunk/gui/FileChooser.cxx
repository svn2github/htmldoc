// generated by Fast Light User Interface Designer (fluid) version 1.00

#include "FileChooser.h"

inline void FileChooser::cb_fileList_i(FileBrowser*, void*) {
  fileListCB();
}
void FileChooser::cb_fileList(FileBrowser* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_fileList_i(o,v);
}

inline void FileChooser::cb_Cancel_i(Fl_Button*, void*) {
  fileList->deselect();
window->hide();
}
void FileChooser::cb_Cancel(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

inline void FileChooser::cb_OK_i(Fl_Return_Button*, void*) {
  window->hide();
}
void FileChooser::cb_OK(Fl_Return_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

inline void FileChooser::cb_roller_i(Fl_Button*, void*) {
  fileList->filter("*");;
rescan();
}
void FileChooser::cb_roller(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_roller_i(o,v);
}

inline void FileChooser::cb_roller1_i(Fl_Roller* o, void*) {
  fileList->textsize(o->value() * 0.1);
fileList->redraw();
}
void FileChooser::cb_roller1(Fl_Roller* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_roller1_i(o,v);
}

inline void FileChooser::cb_reset_i(Fl_Button*, void*) {
  roller->value(140.0);
fileList->textsize(14.0);
fileList->redraw();
}
void FileChooser::cb_reset(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

#include <FL/Fl_Bitmap.H>
static unsigned char bits_reset[] = {  
255, 129, 189, 189, 189, 189, 129, 255
};
static Fl_Bitmap bitmap_reset(bits_reset, 8, 8);

inline void FileChooser::cb_fileName_i(Fl_Input*, void*) {
  fileNameCB();
}
void FileChooser::cb_fileName(Fl_Input* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_fileName_i(o,v);
}

inline void FileChooser::cb_dirName_i(Fl_Input*, void*) {
  directory(dirName->value());
}
void FileChooser::cb_dirName(Fl_Input* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_dirName_i(o,v);
}

inline void FileChooser::cb_upButton_i(Fl_Button*, void*) {
  up();
}
void FileChooser::cb_upButton(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_upButton_i(o,v);
}

static unsigned char bits_up[] = {  
0, 0, 120, 0, 132, 0, 2, 1, 49, 254, 121, 128, 253, 128, 49, 128, 49, 128, 49, 128, 49, 128, 49, 128, 1, 128, 1, 128, 255, 255, 0, 0
};
static Fl_Bitmap bitmap_up(bits_up, 16, 16);

inline void FileChooser::cb_dirMenu_i(Fl_Menu_Button*, void*) {
  directory(dirMenu->text());
}
void FileChooser::cb_dirMenu(Fl_Menu_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_dirMenu_i(o,v);
}

inline void FileChooser::cb_new_i(Fl_Button*, void*) {
  newdir();
}
void FileChooser::cb_new(Fl_Button* o, void* v) {
  ((FileChooser*)(o->parent()->user_data()))->cb_new_i(o,v);
}

static unsigned char bits_new[] = {  
0, 0, 120, 0, 132, 0, 2, 1, 1, 254, 1, 128, 49, 128, 49, 128, 253, 128, 253, 128, 49, 128, 49, 128, 1, 128, 1, 128, 255, 255, 0, 0
};
static Fl_Bitmap bitmap_new(bits_new, 16, 16);

FileChooser::FileChooser(const char *d, char *p, int m, const char *title) {
  Fl_Window* w;
  { Fl_Window* o = window = new Fl_Window(345, 270, "Pick a File");
    w = o;
    o->user_data((void*)(this));
    w->hotspot(o);
    { FileBrowser* o = fileList = new FileBrowser(25, 45, 310, 180);
      o->type(2);
      o->callback((Fl_Callback*)cb_fileList);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Button* o = new Fl_Button(270, 235, 65, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(210, 235, 55, 25, "OK");
      o->callback((Fl_Callback*)cb_OK);
    }
    { Fl_Pack* o = new Fl_Pack(10, 45, 15, 180);
      { Fl_Button* o = new Fl_Button(10, 45, 15, 15, "*");
        o->labelcolor(4);
        o->callback((Fl_Callback*)cb_roller);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      }
      { Fl_Roller* o = roller = new Fl_Roller(10, 60, 15, 100);
        o->minimum(60);
        o->maximum(640);
        o->step(1);
        o->value(140);
        o->callback((Fl_Callback*)cb_roller1);
      }
      { Fl_Button* o = new Fl_Button(10, 160, 15, 15);
        bitmap_reset.label(o);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_reset);
      }
      o->end();
    }
    { Fl_Input* o = fileName = new Fl_Input(75, 235, 130, 25, "Filename:");
      o->callback((Fl_Callback*)cb_fileName);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Input* o = dirName = new Fl_Input(75, 10, 175, 25, "Directory:");
      o->callback((Fl_Callback*)cb_dirName);
    }
    { Fl_Button* o = upButton = new Fl_Button(280, 10, 25, 25);
      bitmap_up.label(o);
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_upButton);
    }
    { Fl_Menu_Button* o = dirMenu = new Fl_Menu_Button(250, 10, 25, 25);
      o->callback((Fl_Callback*)cb_dirMenu);
    }
    { Fl_Button* o = new Fl_Button(310, 10, 25, 25);
      bitmap_new.label(o);
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_new);
    }
    if (title) window->label(title);
    o->set_modal();
    o->end();
  }
  window->size_range(345, 270, 345);
init_icons();
fileList->filter(p);
directory(d);
multi_ = m;
if (m)
  fileList->type(FL_MULTI_BROWSER);
else
  fileList->type(FL_HOLD_BROWSER);
}

void FileChooser::color(Fl_Color c) {
  fileList->color(c);
}

char * FileChooser::directory() {
  return directory_;
}

void FileChooser::filter(const char *p) {
  fileList->filter(p);
rescan();
}

const char * FileChooser::filter() {
  return (fileList->filter());
}

void FileChooser::hide() {
  window->hide();
}

void FileChooser::multi(int m) {
  multi_ = m;
if (m)
  fileList->type(FL_MULTI_BROWSER);
else
  fileList->type(FL_HOLD_BROWSER);
}

int FileChooser::multi() {
  return (multi_);
}

void FileChooser::show() {
  window->show();
fileList->deselect();
}

int FileChooser::visible() {
  return window->visible();
}

void FileChooser::label(const char *l) {
  window->label(l);
}
